package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"operant/graph/model"
	"operant/internal/metrics"
)

// GetMetricsByUser is the resolver for the GetMetricsByUser field.
func (r *queryResolver) GetMetricsByUser(ctx context.Context, userID string) ([]*model.Metric, error) {
	var resultMetrics []*model.Metric
	var dbMetrics []metrics.Metric
	dbMetrics = metrics.GetMetricsByUser(userID)
	for _, metric := range dbMetrics {
		resultMetrics = append(resultMetrics, &model.Metric{Name: metric.Name, HighTreshold: metric.HighTreshold, LowTreshold: metric.LowTreshold, Current: metric.Current, UserID: metric.UserID})
	}
	return resultMetrics, nil
}

// GetMetricsByUserFilterByTreshold is the resolver for the GetMetricsByUserFilterByTreshold field.
func (r *queryResolver) GetMetricsByUserFilterByTreshold(ctx context.Context, userID string, highTreshold int, lowTreshold int) ([]*model.Metric, error) {
	var resultMetrics []*model.Metric
	var dbMetrics []metrics.Metric
	dbMetrics = metrics.GetMetricsByUserFilterByTreshold(userID, highTreshold, lowTreshold)
	for _, metric := range dbMetrics {
		resultMetrics = append(resultMetrics, &model.Metric{Name: metric.Name, HighTreshold: metric.HighTreshold, LowTreshold: metric.LowTreshold, Current: metric.Current, UserID: metric.UserID})
	}
	return resultMetrics, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
